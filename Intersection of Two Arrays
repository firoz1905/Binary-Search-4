Approach 1: Use a single Hashmap to store the frequency of the numbers and then traverse through the other list
Time Complexity : O(m+n)
Space Complexity : O(n) 

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        if (nums1==null || nums2==null || nums1.length==0 || nums2.length==0){
            return new int[0];
        }
        int n1=nums1.length;
        int n2=nums2.length;
        if (n1>n2){
            return intersection(nums2,nums1); // First Array is smaller
        }
        List<Integer> l1=new ArrayList<>();
        HashMap<Integer,Integer> map=new HashMap <>();
        for (int num:nums1){
            map.put(num,map.getOrDefault(num,0)+1); ### Frequency of the values
        }
        for (int num:nums2){
            if (map.containsKey(num)){
                l1.add(num);
                map.put(num,map.get(num)-1) ;// Make the count 0
                map.remove(num,0);
                
            }
            
        }
        int [] result=new int [l1.size()];
        for (int i=0; i<result.length; i++){
            result[i]=l1.get(i);
        }
        return result;
        
    }
}
Approach 2 : If Arrays are sorted. Will do a two pointer. If the value at index of both the lists are equal , add them to the result. 
Time Complexity : O(m+n)
Space complexity : O(n)

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        //Edge Case
        if (nums1==null || nums2==null || nums1.length==0 || nums2.length==0){
            return new int[0];
        }
        int n1=nums1.length;
        int n2=nums2.length;
        if (n1>n2){
            return intersect(nums2,nums1); // First Array is smaller
        }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        List<Integer> l1=new ArrayList<>();
        int p1=0 ; int p2=0;   // Two Pointer Approach
        while(p1<n1 && p2<n2){
           if (nums1[p1]==nums2[p2]) {
               l1.add(nums1[p1]);
               p1++;p2++;
           }else if (nums1[p1]>nums2[p2]){
               p2++;
           }else{
               p1++;
           }
        }
        int [] result=new int [l1.size()];
        for (int i=0; i<result.length; i++){
            result[i]=l1.get(i);
        }
        return result;
        
    }
}

Approach 3 : Binary Search
Time Complexity:nlog(m) . M---> Bigger Array
Space Complexity :



